from __future__ import division

# Copyright (c) 2015-2022 The Switch Authors. All rights reserved.
# Licensed under the Apache License, Version 2, which is in the LICENSE file.

import os
from pyomo.environ import *


from switch_model.utilities import unique_list

"""

This module defines a regional Renewable Portfolio Standard (RPS) policy scheme
for the Switch model. In this scheme, each generator in each zone is categorized as RPS-
elegible or not.
Dispatched electricity that is generated by RPS-elegible sources in each
period and zone is summed up and must meet an energy goal in each zone, set as a required percentage
of all energy that is generated in that period.

This module assumes that the generators.core.no_commit module is being used.
An error will be raised if this module is loaded along the
generators.core.commit package.
"""


def define_components(m):
    """
    ESR_PROGRAM is a set of program/regions that have target shares of "clean energy".
    PERIOD is a subset of PERIODS for which RPS goals are defined.
    esr_gen is a set of generators that are eligible for producing "clean energy"(RPS-eligible).

    load_zone is a subset of model regions where RPS goals are defined.
    rps_share[z in load_zone] is the fraction of total generated energy in
        a period in a zone that has to be provided by RPS-elegible generators.
    """
    # indexing set for the zonal cap: (program, period, zone) combination
    # (These are all the index columns from carbon_policies_regional.csv.)
    m.ESR_RULES = Set(dimen=3, within=Any * m.PERIODS * m.LOAD_ZONES)

    # share target specified for each (program, period, zone) combination
    m.rps_share = Param(m.ESR_RULES, default=float("inf"), within=Reals)

    # names of all the ESR programs and periods when they are in effect;
    # each unique pair of values in the first two columns of
    # ESR_requirement.csv is a (program, period) combo
    m.ESR_PROGRAM_PERIODS = Set(dimen=2, within=Any * m.PERIODS)

    # set of zones that participate in a particular ESR program in a particular period
    m.ZONES_IN_ESR_PROGRAM_PERIOD = Set(
        m.ESR_PROGRAM_PERIODS,
        within=m.LOAD_ZONES,
        initialize=lambda m, pr, pe: [
            _z for (_pr, _pe, _z) in m.ESR_RULES if (_pr, _pe) == (pr, pe)
        ],
    )

    m.ESR_PROGRAM_IN_PERIOD = Set(
        dimen=1,
        initialize=lambda m, p: unique_list((pr) for (pr, p) in m.ESR_PROGRAM_PERIODS),
    )

    m.esr_gen = Param(m.ESR_PROGRAM_PERIODS, within=m.GENERATION_PROJECTS)

    # enforce constraint on regional rps energy share in each program for zones in each period
    def rule(m, p, z):
        # zonal demand for this program/period
        zonal_demand_share = sum(
            m.rps_share[pr, p, z] * m.zone_total_demand_in_period_mwh(z, p)
            for pr in m.ESR_PROGRAM_IN_PERIOD[p]
        )

        # sum of annual dispatched energy for gens in this program in this period of zone z
        ELIGIBLE_Energy = sum(
            m.DispatchGen[g, t] * m.tp_weight[t]
            for g in m.esr_gen[pr, p]
            if g in m.GENS_IN_ZONE[z] and z in m.ZONES_IN_ESR_PROGRAM_PERIOD[pr, p]
            for t in m.TPS_FOR_GEN_IN_PERIOD[g, p]
            for pr in m.ESR_PROGRAM_IN_PERIOD[p]
        )

        # define and return the constraint
        return ELIGIBLE_Energy >= zonal_demand_share

    m.Enforce_rps_share = Constraint(m.ESR_PROGRAM_PERIODS, rule=rule)


def load_inputs(mod, switch_data, inputs_dir):
    """
    The RPS target goals input file is mandatory, to discourage people from
    loading the module if it is not going to be used. It is not necessary to
    specify targets for all periods.

    Mandatory input files:
        ESR_generators.csv
            ESR_PROGRAM, PERIOD, esr_gen

        ESR_requirement.csv:
           ESR_PROGRAM, PERIOD, load_zone, rps_share

    """

    switch_data.load_aug(
        filename=os.path.join(inputs_dir, "ESR_generators.csv"),
        index=mod.ESR_PROGRAM_PERIODS,
        param=(mod.esr_gen,),
    )

    switch_data.load_aug(
        filename=os.path.join(inputs_dir, "ESR_requirement.csv"),
        index=mod.ESR_RULES,
        param=(mod.rps_share,),
    )
